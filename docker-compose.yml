
services:
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kong}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kongpass}
      POSTGRES_DB: ${POSTGRES_DB:-kong}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3

  kong-migrations:
    image: kong/kong-gateway:3.4.2.0
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-kongpass}
      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}
    networks:
      - kong-net

  kong:
    image: kong/kong-gateway:3.4.2.0
    user: "${KONG_USER:-kong}"
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-kongpass}
      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:-}
      KONG_PLUGINS: bundled
      KONG_LOG_LEVEL: info
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8002:8002/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  chromadb:
    image: chromadb/chroma:latest
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "${CHROMADB_PORT:-8003}:8000"
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  support-agent-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_PROXY_URL=http://kong:8000
      - CHROMADB_URL=http://chromadb:8000
      - POSTGRES_HOST=kong-database
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-kong}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kongpass}
      - POSTGRES_DB=${POSTGRES_DB:-kong}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${FASTAPI_PORT:-8080}:8080"
    depends_on:
      kong:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    networks:
      - kong-net
    volumes:
      - ./sessions_backup.json:/app/sessions_backup.json

  support-agent-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      - BACKEND_URL=http://support-agent-backend:8080
      - STREAMLIT_SERVER_PORT=${STREAMLIT_PORT:-8501}
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    depends_on:
      - support-agent-backend
    networks:
      - kong-net

volumes:
  kong_data:
  chroma_data:

networks:
  kong-net:
    external: false